# -*- coding: utf-8 -*-
"""lab7sl

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wMN7TOHaXPeRuSATzOrVHRhxyGqrwnoj
"""

from google.colab import drive
drive.mount('/content/drive')

import random
import shutil
import os 
from keras import backend as k 
import matplotlib
from matplotlib import pyplot
matplotlib.use("Agg")
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix 
import matplotlib.pyplot as plt
import numpy as np 
import sys
from PIL import Image 
sys.modules['Image'] = Image

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.optimizers import Adam 
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils 
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.preprocessing.image import ImageDataGenerator

# model definations
model =  Sequential()
n_filters=40
model.add(Conv2D(n_filters,
                 (3,3),
                 input_shape=(20,20,3)))
model.add(MaxPooling2D((3,3)))
n_filters=60
model.add(Conv2D(n_filters, (3,3)))
model.add(Flatten())
model.add(Dense(n_filters))
n_filters=80
n_class=43
model.add(Dense(n_class))

model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='Adam',
              metrics=['accuracy'])
model.build()
model.summary()

# Data_generating 
training_generator=ImageDataGenerator(rescale=1/255,
                                      rotation_range=20,
                                      zoom_range=0.05,
                                      width_shift_range=0.1,
                                      height_shift_range=0.1,
                                      shear_range=0.05)

validation_generator = ImageDataGenerator(rescale=1/255)

BS=32 #batch size
testing_flow=training_generator.flow_from_directory(directory="/content/drive/My Drive/LABSL/test",
                                                     class_mode="categorical",
                                                     target_size=(20,20),
                                                     color_mode='rgb',
                                                     shuffle=True,
                                                     batch_size=BS)

BS=32 #batch size
validation_flow=validation_generator.flow_from_directory(directory="/content/drive/My Drive/LABSL/val",
                                                     class_mode="categorical",
                                                     target_size=(20,20),
                                                     color_mode='rgb',
                                                     shuffle=True,
                                                     batch_size=BS)
BS=32 #batch size
training_flow=validation_generator.flow_from_directory(directory="/content/drive/My Drive/LABSL/train",
                                                     class_mode="categorical",
                                                     target_size=(20,20),
                                                     color_mode='rgb',
                                                     shuffle=True,
                                                     batch_size=BS)

total_train = 27446
total_val = 3921
total_test = 7842

output_model=model.fit_generator(training_flow, steps_per_epoch=27446//32+1,
                                 validation_data=validation_flow, validation_steps=3921//32+1,
                           epochs=4)

output_model.history['acc']
output_model.history['val_acc']
output_model.history['loss']
output_model.history['val_loss']

# summarize history for accuracy:
plt.figure()
plt.plot(output_model.history['acc'])
plt.plot(output_model.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()
plt.savefig("Accuracy3.png")
# summarize history for loss:
plt.figure()
plt.plot(output_model.history['loss'])
plt.plot(output_model.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()
plt.savefig("Loss3.png")

prediction=model.predict_generator(testing_flow, steps=total_test//32+1)
predicted_classes=np.argmax(prediction, axis=1)

cm=confusion_matrix(testing_flow.classes,predicted_classes)
plt.imshow(cm)
plt.savefig("cm2.png")

tp = confusion_matrix(testing_flow.classes, predicted_classes).ravel()
tn =   confusion_matrix(testing_flow.classes, predicted_classes).ravel()
fp =  confusion_matrix(testing_flow.classes, predicted_classes).ravel()
fn =  confusion_matrix(testing_flow.classes, predicted_classes).ravel()

#Accuracy
Accuracy = (tn+tp)*100/(tp+tn+fp+fn) 

#Specificity 
Specificity = tn/(tn+fp)

#sensitivity 
sensitivity = TP/(TP+FN)